version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:3000"
    volumes:
      # Mount the frontend directory to the /app directory in the container
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
      - ORDER_EXECUTORS=order_executor_1:50055,order_executor_2:50055

    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
      - ./logs:/app/logs
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
      - ./logs:/app/logs

  book_recommendation:
    build:
      context: ./
      dockerfile: ./book_recommendation/Dockerfile
    ports:
      - 50053:50053
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/book_recommendation/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./book_recommendation/src:/app/book_recommendation/src
      - ./logs:/app/logs

  transaction_verification:
    build:
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      - 50052:50052
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./transaction_verification/src:/app/transaction_verification/src
      - ./logs:/app/logs

  order_mq:
    build:
      context: ./
      dockerfile: ./order_mq/Dockerfile
    ports:
      - 9000:9000
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_mq/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./order_mq/src:/app/order_mq/src
      - ./logs:/app/logs

  order_executor_1:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - EXECUTOR_LIST_URL=http://orchestrator:5000/order_executors
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
      - ./logs:/app/logs
    depends_on:
      - orchestrator

  order_executor_2:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - EXECUTOR_LIST_URL=http://orchestrator:5000/order_executors
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
      - ./logs:/app/logs
    depends_on:
      - orchestrator

      
  order_executor_3:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - EXECUTOR_LIST_URL=http://orchestrator:5000/order_executors
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
      - ./logs:/app/logs
    depends_on:
      - orchestrator


      