# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fraud_detection_pb2 as fraud__detection__pb2


class FraudDetectionStub(object):
    """message VectorClock {
    map<string, int64> entries = 1;
    }

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckCreditCardForFraud = channel.unary_unary(
                '/fraud_detection.FraudDetection/CheckCreditCardForFraud',
                request_serializer=fraud__detection__pb2.FraudDetectionRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.FraudDetectionResponse.FromString,
                )
        self.CheckUserDataForFraud = channel.unary_unary(
                '/fraud_detection.FraudDetection/CheckUserDataForFraud',
                request_serializer=fraud__detection__pb2.CheckUserDataRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.CheckUserDataResponse.FromString,
                )


class FraudDetectionServicer(object):
    """message VectorClock {
    map<string, int64> entries = 1;
    }

    """

    def CheckCreditCardForFraud(self, request, context):
        """Checks credit card data for fraud
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserDataForFraud(self, request, context):
        """Checks user data for fraud
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FraudDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckCreditCardForFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCreditCardForFraud,
                    request_deserializer=fraud__detection__pb2.FraudDetectionRequest.FromString,
                    response_serializer=fraud__detection__pb2.FraudDetectionResponse.SerializeToString,
            ),
            'CheckUserDataForFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserDataForFraud,
                    request_deserializer=fraud__detection__pb2.CheckUserDataRequest.FromString,
                    response_serializer=fraud__detection__pb2.CheckUserDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fraud_detection.FraudDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FraudDetection(object):
    """message VectorClock {
    map<string, int64> entries = 1;
    }

    """

    @staticmethod
    def CheckCreditCardForFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud_detection.FraudDetection/CheckCreditCardForFraud',
            fraud__detection__pb2.FraudDetectionRequest.SerializeToString,
            fraud__detection__pb2.FraudDetectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUserDataForFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud_detection.FraudDetection/CheckUserDataForFraud',
            fraud__detection__pb2.CheckUserDataRequest.SerializeToString,
            fraud__detection__pb2.CheckUserDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
