syntax = "proto3";

package orderqueue;

// The order queue service definition.
service OrderQueue {
  rpc Enqueue(OrderRequest) returns (OrderResponse) {}
  rpc Dequeue(DequeueRequest) returns (OrderRequest) {}
  rpc ElectLeader(ElectionRequest) returns (ElectionResponse) {} 
}

message VectorClock {
  map<string, int64> entries = 1;
}

message OrderRequest {
    string orderId = 1;
    string userId = 2; 
    repeated string bookTitles = 3; 
    VectorClock vector_clock = 4;
}

// The response message indicating the result of enqueueing.
message OrderResponse {
  bool success = 1;
  string message = 2;
  VectorClock vector_clock = 3; 
}

// The request message for dequeueing.
message DequeueRequest {
  
}

message ElectionRequest {
  string executorId = 1; // Unique identifier of the Order Executor instance
}

message ElectionResponse {
  bool isLeader = 1; // True if the requesting executor is elected as the leader
}