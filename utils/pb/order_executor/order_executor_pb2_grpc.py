# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import order_executor_pb2 as order__executor__pb2


class OrderExecutorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/orderexecutor.OrderExecutorService/HealthCheck',
                request_serializer=order__executor__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=order__executor__pb2.HealthCheckResponse.FromString,
                )
        self.ExecuteOrder = channel.unary_unary(
                '/orderexecutor.OrderExecutorService/ExecuteOrder',
                request_serializer=order__executor__pb2.ExecuteOrderRequest.SerializeToString,
                response_deserializer=order__executor__pb2.ExecuteOrderResponse.FromString,
                )
        self.Vote = channel.unary_unary(
                '/orderexecutor.OrderExecutorService/Vote',
                request_serializer=order__executor__pb2.VoteRequest.SerializeToString,
                response_deserializer=order__executor__pb2.VoteResponse.FromString,
                )


class OrderExecutorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderExecutorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=order__executor__pb2.HealthCheckRequest.FromString,
                    response_serializer=order__executor__pb2.HealthCheckResponse.SerializeToString,
            ),
            'ExecuteOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteOrder,
                    request_deserializer=order__executor__pb2.ExecuteOrderRequest.FromString,
                    response_serializer=order__executor__pb2.ExecuteOrderResponse.SerializeToString,
            ),
            'Vote': grpc.unary_unary_rpc_method_handler(
                    servicer.Vote,
                    request_deserializer=order__executor__pb2.VoteRequest.FromString,
                    response_serializer=order__executor__pb2.VoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orderexecutor.OrderExecutorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderExecutorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orderexecutor.OrderExecutorService/HealthCheck',
            order__executor__pb2.HealthCheckRequest.SerializeToString,
            order__executor__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orderexecutor.OrderExecutorService/ExecuteOrder',
            order__executor__pb2.ExecuteOrderRequest.SerializeToString,
            order__executor__pb2.ExecuteOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orderexecutor.OrderExecutorService/Vote',
            order__executor__pb2.VoteRequest.SerializeToString,
            order__executor__pb2.VoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
